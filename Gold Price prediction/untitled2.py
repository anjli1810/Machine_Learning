# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/103h5z3v0of9E-rZZdCyN2Ox10Yv0pqzt
"""

#Regression Model
#Used Random Forest Regression Model
# Data -> Data Preprocessing ->Data Analysis ->Train Tes Split-> Random Forest regressor -> Evaluation

#importing Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

"""Data Collection and Processing"""

gold_data=pd.read_csv('/content/gld_price_data.csv')

gold_data.head()  #GLD is the target

#print last 5 rows
gold_data.tail()

#shape
gold_data.shape

#getting basic information about the data
gold_data.info()

#checking null values
gold_data.isnull().sum()

#getting the statistical measures of the data
gold_data.describe()

"""Correlation

1)Positive Correlation

2)Negative Correlation
"""

correlation=gold_data.corr()

#constructing heatmap to understand clearly
plt.figure(figsize=(8,8))
sns.heatmap(correlation ,cbar=True,annot=True, cmap='Greens',fmt='.1f')
plt.title('Correlation')

#correlation values of GLD
print(correlation['GLD'])

#checking the distribution of the GLD Price
sns.distplot(gold_data['GLD'],color='Red')

"""Splitting the feature"""

X=gold_data.drop(['Date','GLD'],axis=1)
y=gold_data['GLD']

X.head()

y.head()

"""Splitting into Training Data and Testing Data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,y,test_size=0.2,random_state=2)

"""Model training :- Random Forest"""

regressor=RandomForestRegressor(n_estimators=100)

#training the model
regressor.fit(X_train,Y_train)

"""Model Evaluation"""

#prediction on test Data
test_data_prediction=regressor.predict(X_test)

print(test_data_prediction)

#predict these values with actual values
#Y_test are actual values
# 1) R quared error
error_score=metrics.r2_score(Y_test,test_data_prediction)

print("R squared error :",error_score)

"""Compare the actual values and predicted values in plot"""

Y_test=list(Y_test)

plt.plot(Y_test,color="blue",label="Actual Values")
plt.plot(test_data_prediction, color="green", label="Predicted Value")
plt.title("Actual Price vs Predicted Price")
plt.xlabel("Number of values")
plt.ylabel("GLD Price")
plt.legend()
plt.show()

